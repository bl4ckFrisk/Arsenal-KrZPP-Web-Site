import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import styles from '../../styles/AuthPages.module.css';

interface UserData {
  email: string;
  password: string;
  username: string;
  firstName: string;
  lastName: string;
  middleName: string;
  position: string;
  department: string;
  employeeId: string;
}

export const DevRegisterPage = () => {
  const [formData, setFormData] = useState<UserData>({
    email: '',
    password: '',
    username: '',
    firstName: '',
    lastName: '',
    middleName: '',
    position: '',
    department: '',
    employeeId: ''
  });
  const [message, setMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const generateEmployeeId = () => {
    const timestamp = Date.now().toString().slice(-6);
    const randomNum = Math.floor(Math.random() * 100).toString().padStart(2, '0');
    return `–ö—Ä–ó–ü–ü${timestamp}${randomNum}`;
  };

  const fillTestData = () => {
    const testUsers = [
      {
        email: 'ivanov.test@krzpp.ru',
        username: 'ivanov_ii',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ò–≤–∞–Ω–æ–≤–∏—á',
        position: '–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥',
        department: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ1'
      },
      {
        email: 'petrov.test@krzpp.ru',
        username: 'petrov_ap',
        firstName: '–ê–Ω–¥—Ä–µ–π',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        middleName: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        position: '–ú–∞—Å—Ç–µ—Ä —É—á–∞—Å—Ç–∫–∞',
        department: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ2'
      },
      {
        email: 'sidorova.test@krzpp.ru',
        username: 'sidorova_ek',
        firstName: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
        lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
        middleName: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞',
        position: '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞',
        department: '–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è'
      }
    ];
    
    const randomUser = testUsers[Math.floor(Math.random() * testUsers.length)];
    setFormData({
      ...randomUser,
      password: 'test123456',
      employeeId: generateEmployeeId()
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage('');
    
    try {
      const response = await fetch('/api/auth/create-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        setMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user.username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
        setIsSuccess(true);
        setFormData({
          email: '',
          password: '',
          username: '',
          firstName: '',
          lastName: '',
          middleName: '',
          position: '',
          department: '',
          employeeId: ''
        });
      } else {
        setMessage(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setIsSuccess(false);
      }
    } catch (err) {
      setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setIsSuccess(false);
    }
  };

  const createTestUsers = async () => {
    const testUsers = [
      {
        email: 'ivanov.test@krzpp.ru',
        password: 'test123456',
        username: 'ivanov_ii',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ò–≤–∞–Ω–æ–≤–∏—á',
        position: '–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥',
        department: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ1',
        employeeId: '–ö—Ä–ó–ü–ü001001'
      },
      {
        email: 'petrov.test@krzpp.ru',
        password: 'test123456',
        username: 'petrov_ap',
        firstName: '–ê–Ω–¥—Ä–µ–π',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        middleName: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        position: '–ú–∞—Å—Ç–µ—Ä —É—á–∞—Å—Ç–∫–∞',
        department: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ2',
        employeeId: '–ö—Ä–ó–ü–ü002001'
      },
      {
        email: 'sidorova.test@krzpp.ru',
        password: 'test123456',
        username: 'sidorova_ek',
        firstName: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
        lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
        middleName: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞',
        position: '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞',
        department: '–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è',
        employeeId: '–ö—Ä–ó–ü–ü003001'
      },
      {
        email: 'kozlov.test@krzpp.ru',
        password: 'test123456',
        username: 'kozlov_dm',
        firstName: '–î–º–∏—Ç—Ä–∏–π',
        lastName: '–ö–æ–∑–ª–æ–≤',
        middleName: '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        position: '–°—Ç–∞—Ä—à–∏–π –∏–Ω–∂–µ–Ω–µ—Ä',
        department: '–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        employeeId: '–ö—Ä–ó–ü–ü004001'
      },
      {
        email: 'popova.test@krzpp.ru',
        password: 'test123456',
        username: 'popova_nv',
        firstName: '–ù–∞—Ç–∞–ª—å—è',
        lastName: '–ü–æ–ø–æ–≤–∞',
        middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        position: '–≠–∫–æ–Ω–æ–º–∏—Å—Ç',
        department: '–ü–ª–∞–Ω–æ–≤–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª',
        employeeId: '–ö—Ä–ó–ü–ü005001'
      },
      {
        email: 'volkov.test@krzpp.ru',
        password: 'test123456',
        username: 'volkov_sv',
        firstName: '–°–µ—Ä–≥–µ–π',
        lastName: '–í–æ–ª–∫–æ–≤',
        middleName: '–í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
        position: '–ù–∞–ª–∞–¥—á–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        department: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ3',
        employeeId: '–ö—Ä–ó–ü–ü006001'
      },
      {
        email: 'orlova.test@krzpp.ru',
        password: 'test123456',
        username: 'orlova_av',
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–û—Ä–ª–æ–≤–∞',
        middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        position: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
        department: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂',
        employeeId: '–ö—Ä–ó–ü–ü007001'
      }
    ];

    let successCount = 0;
    let errors: string[] = [];

    for (const user of testUsers) {
      try {
        const response = await fetch('/api/auth/create-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(user),
        });
        
        if (response.ok) {
          successCount++;
        } else {
          const errorData = await response.json();
          errors.push(`${user.username}: ${errorData.message}`);
        }
      } catch (err) {
        errors.push(`${user.username}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
      }
    }

    if (errors.length > 0) {
      setMessage(`–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${successCount}. –û—à–∏–±–∫–∏: ${errors.join(', ')}`);
      setIsSuccess(successCount > 0);
    } else {
      setMessage(`–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${successCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      setIsSuccess(true);
    }
  };

  return (
    <div className={styles.authPage}>
      <header className={styles.authHeader}>
        <div className={styles.headerContent}>
          <Link to="/" className={styles.headerLogo}>
            <div className={styles.logoContainer}>
              <div className={styles.logoText}>Arsenal</div>
              <div className={styles.logoSubtext}>–ö—Ä–ó–ü–ü</div>
            </div>
          </Link>
        </div>
      </header>

      <div className={styles.authContent}>
        <div className={`${styles.formContainer} ${styles.wide}`}>
          <div className={styles.formHeader}>
            <h2 className={styles.formTitle}>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h2>
            <p className={styles.formSubtitle}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</p>
          </div>

          <form onSubmit={handleSubmit} className={styles.authForm}>
            <div className={styles.inputGroup}>
              <label htmlFor="email">Email</label>
              <div className={styles.inputWrapper}>
                <span className={styles.inputIcon}>‚úâ</span>
                <input
                  type="email"
                  id="email"
                  name="email"
                  required
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="ivan@krzpp.ru"
                />
              </div>
            </div>

            <div className={styles.inputGroup}>
              <label htmlFor="username">–õ–æ–≥–∏–Ω</label>
              <div className={styles.inputWrapper}>
                <span className={styles.inputIcon}>üë§</span>
                <input
                  type="text"
                  id="username"
                  name="username"
                  required
                  value={formData.username}
                  onChange={handleInputChange}
                  placeholder="ivanov_ii"
                />
              </div>
            </div>

            <div className={styles.inputGroup}>
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
              <div className={styles.inputWrapper}>
                <span className={styles.inputIcon}>üîí</span>
                <input
                  type="password"
                  id="password"
                  name="password"
                  required
                  value={formData.password}
                  onChange={handleInputChange}
                  placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                />
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.inputGroup}>
                <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
                <div className={styles.inputWrapper}>
                  <span className={styles.inputIcon}>üë®</span>
                  <input
                    type="text"
                    id="lastName"
                    name="lastName"
                    required
                    value={formData.lastName}
                    onChange={handleInputChange}
                    placeholder="–ò–≤–∞–Ω–æ–≤"
                  />
                </div>
              </div>

              <div className={styles.inputGroup}>
                <label htmlFor="firstName">–ò–º—è</label>
                <div className={styles.inputWrapper}>
                  <span className={styles.inputIcon}>üë§</span>
                  <input
                    type="text"
                    id="firstName"
                    name="firstName"
                    required
                    value={formData.firstName}
                    onChange={handleInputChange}
                    placeholder="–ò–≤–∞–Ω"
                  />
                </div>
              </div>
            </div>

            <div className={styles.inputGroup}>
              <label htmlFor="middleName">–û—Ç—á–µ—Å—Ç–≤–æ</label>
              <div className={styles.inputWrapper}>
                <span className={styles.inputIcon}>üë®</span>
                <input
                  type="text"
                  id="middleName"
                  name="middleName"
                  value={formData.middleName}
                  onChange={handleInputChange}
                  placeholder="–ò–≤–∞–Ω–æ–≤–∏—á"
                />
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.inputGroup}>
                <label htmlFor="position">–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
                <div className={styles.inputWrapper}>
                  <span className={styles.inputIcon}>üíº</span>
                  <input
                    type="text"
                    id="position"
                    name="position"
                    required
                    value={formData.position}
                    onChange={handleInputChange}
                    placeholder="–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥"
                  />
                </div>
              </div>

              <div className={styles.inputGroup}>
                <label htmlFor="department">–û—Ç–¥–µ–ª</label>
                <div className={styles.inputWrapper}>
                  <span className={styles.inputIcon}>üè¢</span>
                  <input
                    type="text"
                    id="department"
                    name="department"
                    required
                    value={formData.department}
                    onChange={handleInputChange}
                    placeholder="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ‚Ññ1"
                  />
                </div>
              </div>
            </div>

            <div className={styles.inputGroup}>
              <label htmlFor="employeeId">–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</label>
              <div className={styles.inputWrapper}>
                <span className={styles.inputIcon}>üè∑</span>
                <input
                  type="text"
                  id="employeeId"
                  name="employeeId"
                  required
                  value={formData.employeeId}
                  onChange={handleInputChange}
                  placeholder="–ö—Ä–ó–ü–ü001001"
                />
              </div>
            </div>

            <div className={styles.formActions}>
              <button 
                type="button" 
                onClick={fillTestData} 
                className={`${styles.authButton} ${styles.secondary}`}
              >
                –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
              </button>
              
              <button 
                type="submit" 
                className={styles.authButton}
              >
                –°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </button>
            </div>
          </form>

          <div className={styles.formActions}>
            <button 
              type="button" 
              onClick={createTestUsers} 
              className={`${styles.authButton} ${styles.secondary} ${styles.wide}`}
            >
              –°–æ–∑–¥–∞—Ç—å 7 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            </button>
          </div>

          {message && (
            <div className={`${styles.message} ${isSuccess ? styles.success : styles.error}`}>
              {message}
            </div>
          )}

          <div className={styles.formFooter}>
            <p>
              <Link to="/login" className={styles.authLink}>
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}; 