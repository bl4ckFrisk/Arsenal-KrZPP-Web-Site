import React, { useState, useEffect } from 'react';
import styles from './DashboardStats.module.css';

interface Stats {
  documentsCount: number;
  productsCount: number;
  unreadMessages: number;
  lowStockProducts: number;
}

export const DashboardStats = () => {
  const [stats, setStats] = useState<Stats>({
    documentsCount: 0,
    productsCount: 0,
    unreadMessages: 0,
    lowStockProducts: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const token = localStorage.getItem('jwt_token') || sessionStorage.getItem('jwt_token');
        const headers = {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        };

        // Fetch parallel requests
        const [documentsRes, productsRes, messagesRes, lowStockRes] = await Promise.all([
          fetch('/api/documents', { headers }),
          fetch('/api/products', { headers }),
          fetch('/api/messages/unread-count', { headers }),
          fetch('/api/products/low-stock?threshold=10', { headers }),
        ]);

        const [documents, products, messages, lowStock] = await Promise.all([
          documentsRes.ok ? documentsRes.json() : [],
          productsRes.ok ? productsRes.json() : [],
          messagesRes.ok ? messagesRes.json() : { count: 0 },
          lowStockRes.ok ? lowStockRes.json() : [],
        ]);

        setStats({
          documentsCount: documents.length || 0,
          productsCount: products.length || 0,
          unreadMessages: messages.count || 0,
          lowStockProducts: lowStock.length || 0,
        });
      } catch (error) {
        console.error('Failed to fetch stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  const statItems = [
    {
      title: '–î–æ–∫—É–º–µ–Ω—Ç—ã',
      value: stats.documentsCount,
      icon: 'üìÅ',
      color: 'blue',
      description: '–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ'
    },
    {
      title: '–ü—Ä–æ–¥—É–∫—Ü–∏—è',
      value: stats.productsCount,
      icon: 'üîß',
      color: 'green',
      description: '–ü–æ–∑–∏—Ü–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ'
    },
    {
      title: '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ',
      value: stats.unreadMessages,
      icon: 'üí¨',
      color: 'yellow',
      description: '–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
    },
    {
      title: '–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
      value: stats.lowStockProducts,
      icon: '‚ö†Ô∏è',
      color: 'red',
      description: '–¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º'
    },
  ];

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2 className={styles.title}>–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã</h2>
        <p className={styles.subtitle}>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç—ã</p>
      </div>

      <div className={styles.statsGrid}>
        {statItems.map((item, index) => (
          <div key={index} className={`${styles.statCard} ${styles[item.color]}`}>
            <div className={styles.statIcon}>{item.icon}</div>
            <div className={styles.statContent}>
              <div className={styles.statValue}>{item.value}</div>
              <div className={styles.statTitle}>{item.title}</div>
              <div className={styles.statDescription}>{item.description}</div>
            </div>
          </div>
        ))}
      </div>

      <div className={styles.quickActions}>
        <h3 className={styles.sectionTitle}>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className={styles.actionsGrid}>
          <button className={styles.actionButton}>
            <span className={styles.actionIcon}>üìÑ</span>
            <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</span>
          </button>
          <button className={styles.actionButton}>
            <span className={styles.actionIcon}>‚ûï</span>
            <span>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç</span>
          </button>
          <button className={styles.actionButton}>
            <span className={styles.actionIcon}>‚úâÔ∏è</span>
            <span>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
          </button>
          <button className={styles.actionButton}>
            <span className={styles.actionIcon}>üîç</span>
            <span>–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä—Ç–∏–∏</span>
          </button>
        </div>
      </div>
    </div>
  );
}; 